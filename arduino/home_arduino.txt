#include <Wire.h>
#include <ArduinoJson.h>

#define SLAVE_ADDR 8  // I2C address of the Arduino Nano

String receivedData = "";  // Buffer to store received JSON
bool newDataAvailable = false;  // Flag for new data

// Assign pins for devices
const int burnerPin = 2;
const int heaterPin = 7;
const int pumpPin = 10;

// ‚úÖ Improved JSON Buffering Logic
void receiveEvent(int bytes) {
    while (Wire.available()) {
        char c = Wire.read();
        receivedData += c;  // ‚úÖ Append each received character

        if (c == '\n') {  // ‚úÖ Process only when a newline is received
            newDataAvailable = true;
        }
    }
}

void setup() {
    Serial.begin(115200);
    Wire.begin(SLAVE_ADDR);
    Wire.onReceive(receiveEvent);

    pinMode(burnerPin, OUTPUT);
    pinMode(heaterPin, OUTPUT);
    pinMode(pumpPin, OUTPUT);
}

void loop() {
    if (newDataAvailable) {
        Serial.println("üîç Processing Full JSON Buffer:");
        Serial.println(receivedData);  // ‚úÖ Print entire received buffer

        int startIdx = 0;
        while (startIdx < receivedData.length()) {
            int openBrace = receivedData.indexOf('{', startIdx);
            int closeBrace = receivedData.indexOf('}', openBrace);

            if (openBrace == -1 || closeBrace == -1) break;  // No valid JSON found

            // ‚úÖ Extract a single JSON object
            String jsonObject = receivedData.substring(openBrace, closeBrace + 1);
            startIdx = closeBrace + 1;  // Move to the next object

            // ‚úÖ Parse the JSON object
            StaticJsonDocument<256> doc;
            DeserializationError error = deserializeJson(doc, jsonObject);

            if (!error) {
                String deviceType = doc["device"];
                String status = doc["status"];

                Serial.print("‚úÖ Parsed: ");
                Serial.print(deviceType);
                Serial.print(" -> ");
                Serial.println(status);

                // ‚úÖ Control the device based on received status
                if (deviceType == "burner") setOutput(burnerPin, status);
                if (deviceType == "heater") setOutput(heaterPin, status);
                if (deviceType == "pump") setOutput(pumpPin, status);
            } else {
                Serial.println("‚ùå JSON Parsing Failed! Dumping raw object:");
                Serial.println(jsonObject);
            }
        }

        receivedData = "";  // ‚úÖ Clear buffer after processing
        newDataAvailable = false;
    }

    delay(500);
}

void setOutput(int pin, String status) {
    static bool lastState[11] = {LOW}; // Assuming max 11 pins, indexed by pin number

    bool newState = (status == "on") ? HIGH : LOW;

    if (lastState[pin] != newState) { // Only update if state changes
        digitalWrite(pin, newState);
        lastState[pin] = newState;
    }
}
