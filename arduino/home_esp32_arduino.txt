#include <Wire.h>
#include <ArduinoJson.h>
#include "BluetoothSerial.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <Preferences.h>

/*
const char* ssid = "Marwan-2.4G-";
const char* password = "z31n4bm4ri4m_$20142018$";

const char* ssid = "MCT";
const char* password = "190203B3E8";

const char* serverUrl = "http://13.38.60.36:5000/burner";
*/

#define SLAVE_ADDR 8  // I2C address of the Arduino Nano

String ssid;
String pw;
String serverUrl;

BluetoothSerial SerialBT;
Preferences preferences;

void setup() {

  Serial.begin(115200);
  //WiFi.begin(ssid, password);

  Serial.println("Initializing Preferences...");
  preferences.begin("my-app", false);

  // Load stored WiFi credentials or set default values
  ssid = preferences.getString("ssid", "Marwan-2.4G-");
  pw = preferences.getString("password", "z31n4bm4ri4m_$20142018$");
  serverUrl = preferences.getString("serverUrl", "http://35.181.4.56:5000/burner");

  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid.c_str(), pw.c_str());

  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 20) {
    delay(1000);
    Serial.print(".");
    retry++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi.");
  }

  SerialBT.begin("ESPBT");  // Start Bluetooth communication
  Serial.println("Bluetooth started. Pair and send commands.");
    
  Wire.begin();  // ESP32 uses default SDA (GPIO 21) & SCL (GPIO 22)
}

void loop() {
  if (SerialBT.available()) {
    String input = SerialBT.readStringUntil('\n');
    handleBluetoothInput(input);
  }

  if (WiFi.status() == WL_CONNECTED) {
      SerialBT.println(WiFi.localIP());
      HTTPClient http;
      http.begin(serverUrl);
      
      int httpResponseCode = http.GET();
      if (httpResponseCode > 0) {
          String payload = http.getString();
          Serial.println("Received Data: " + payload);

          // Parse JSON response
          JsonDocument doc;
          deserializeJson(doc, payload);
          
          String stamp = doc["stamp"];
          String onoff = doc["onoff"];

          Serial.println("onoff: " + onoff);
          Serial.println("stamp: " + stamp);

          String dataToSend = "{\"status\":\"" + onoff + "\"}";
          Serial.println("Sending to Arduino: " + dataToSend);
      
          Wire.beginTransmission(SLAVE_ADDR); // Start I2C transmission
          Wire.write((const uint8_t*)dataToSend.c_str(), dataToSend.length()); // Send data correctly
          Wire.endTransmission();             // Stop transmission
      } else {
          Serial.println("Error on HTTP request");
      }

      http.end();
  } else {
    SerialBT.println("WiFi Disconnected");
    Serial.println("WiFi Disconnected");
  }
    
  delay(1000); // Send every second
}

void handleBluetoothInput(String input)
{
  input.trim();
  bool shouldReconnect = false;

  if (input.startsWith("ssid:"))
  {
    ssid = input.substring(5);
    preferences.putString("ssid", ssid);
    SerialBT.println("SSID updated to: " + ssid);
    shouldReconnect = true;
  }
  else if (input.startsWith("pw:"))
  {
    pw = input.substring(3);
    preferences.putString("password", pw);
    SerialBT.println("Password updated.");
    shouldReconnect = true;
  }
  else if(input.startsWith("serverUrl:"))
  {
    serverUrl = input.substring(10);
    preferences.putString("serverUrl", serverUrl);
    SerialBT.println("Password updated.");
  }
  else
  {
    SerialBT.println("Invalid command. Use ssid:<value> or pw:<value>");
  }

  if (shouldReconnect) {
    reconnectWiFi();
  }
}

void reconnectWiFi()
{
  SerialBT.println("Reconnecting to WiFi...");
  WiFi.disconnect();
  delay(1000);

  WiFi.begin(ssid.c_str(), pw.c_str());

  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 20) {
    delay(1000);
    Serial.print(".");
    SerialBT.print(".");
    retry++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nReconnected to WiFi.");
    Serial.print("New IP Address: ");
    Serial.println(WiFi.localIP());

    SerialBT.println("\nReconnected to WiFi.");
    SerialBT.print("New IP Address: ");
    SerialBT.println(WiFi.localIP());
  } 
  else {
    Serial.println("\nFailed to reconnect to WiFi.");
    SerialBT.println("\nFailed to reconnect to WiFi.");
  }
}
