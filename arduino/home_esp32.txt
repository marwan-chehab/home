#include <Wire.h>
#include <ArduinoJson.h>
#include "BluetoothSerial.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <Preferences.h>

#define SLAVE_ADDR 8

String ssid;
String pw;
String serverUrl;

BluetoothSerial SerialBT;
Preferences preferences;

void setup() {
    Serial.begin(115200);
    preferences.begin("my-app", false);

    ssid = preferences.getString("ssid", "Marwan-2.4G-");
    pw = preferences.getString("password", "z31n4bm4ri4m_$20142018$");
    serverUrl = preferences.getString("serverUrl", "http://35.181.4.56:5000/get_device_statuses");

    Serial.println("üåê Connecting to WiFi...");
    WiFi.begin(ssid.c_str(), pw.c_str());

    int retry = 0;
    while (WiFi.status() != WL_CONNECTED && retry < 20) {
        delay(1000);
        Serial.print(".");
        retry++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ Connected to WiFi: " + WiFi.localIP());
    } else {
        Serial.println("\n‚ùå Failed to connect to WiFi.");
    }

    SerialBT.begin("ESPBT");
    Wire.begin();
    Serial.println("‚úÖ ESP32 Ready");
}

void loop() {
    if (SerialBT.available()) {
        String input = SerialBT.readStringUntil('\n');
        handleBluetoothInput(input);
    }

    if (WiFi.status() == WL_CONNECTED) {
        fetchAndSendDeviceStatuses();
    } else {
        Serial.println("‚ö†Ô∏è WiFi Disconnected!");
        reconnectWiFi();
    }
    delay(2000);  // Increased delay to avoid flooding I2C
}

void fetchAndSendDeviceStatuses() {
    HTTPClient http;
    http.begin(serverUrl);
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
        String payload = http.getString();
        Serial.println("üì© Received from Flask: " + payload);

        DynamicJsonDocument doc(1024);
        DeserializationError error = deserializeJson(doc, payload);

        if (!error) {
            for (JsonObject device : doc.as<JsonArray>()) {
                String deviceType = device["device_type"].as<String>();
                String status = device["status"].as<String>();
                String dataToSend = "{\"device\":\"" + deviceType + "\",\"status\":\"" + status + "\"}";
                sendToArduino(dataToSend);
            }
        } else {
            Serial.println("‚ùå JSON Parsing Failed: " + String(error.c_str()));
        }
    } else {
        Serial.print("‚ùå HTTP Error: ");
        Serial.println(httpResponseCode);
    }
    http.end();
}

void sendToArduino(String data) {
    Serial.print("üì° I2C Sending: ");
    Serial.println(data);

    Wire.beginTransmission(SLAVE_ADDR);
    int bytesWritten = Wire.write((const uint8_t*)data.c_str(), data.length());
    int result = Wire.endTransmission();
    Serial.print("üìè Bytes Written: ");
    Serial.print(bytesWritten);
    Serial.print(" | Result: ");
    Serial.println(result);  // 0 = success

    delay(50);

    Wire.beginTransmission(SLAVE_ADDR);
    Wire.write('\n');
    Wire.endTransmission();
}

// Bluetooth and WiFi handling functions remain unchanged...
void handleBluetoothInput(String input) {
    input.trim();
    bool shouldReconnect = false;

    if (input.startsWith("ssid:")) {
        ssid = input.substring(5);
        preferences.putString("ssid", ssid);
        SerialBT.println("‚úÖ SSID updated to: " + ssid);
        shouldReconnect = true;
    } else if (input.startsWith("pw:")) {
        pw = input.substring(3);
        preferences.putString("password", pw);
        SerialBT.println("‚úÖ Password updated.");
        shouldReconnect = true;
    } else if (input.startsWith("serverUrl:")) {
        serverUrl = input.substring(10);
        preferences.putString("serverUrl", serverUrl);
        SerialBT.println("‚úÖ Server URL updated.");
    } else {
        SerialBT.println("‚ùå Invalid command. Use: ssid:<value>, pw:<value>, serverUrl:<value>");
    }

    if (shouldReconnect) reconnectWiFi();
}

void reconnectWiFi() {
    SerialBT.println("üîÑ Reconnecting to WiFi...");
    WiFi.disconnect();
    delay(1000);
    WiFi.begin(ssid.c_str(), pw.c_str());

    int retry = 0;
    while (WiFi.status() != WL_CONNECTED && retry < 20) {
        delay(1000);
        Serial.print(".");
        SerialBT.print(".");
        retry++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ Reconnected to WiFi: " + WiFi.localIP());
        SerialBT.println("\n‚úÖ Reconnected to WiFi: " + WiFi.localIP());
    } else {
        Serial.println("\n‚ùå Failed to reconnect.");
        SerialBT.println("\n‚ùå Failed to reconnect.");
    }
}
