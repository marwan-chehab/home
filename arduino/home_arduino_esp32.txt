#include <Wire.h>
#include <ArduinoJson.h>

#define SLAVE_ADDR 8  // I2C address of the Arduino Nano

String receivedData = "";  // Store received data
bool newDataAvailable = false;  // Flag for new data

// Assign pins for devices
const int burnerPin = 5;  // D2 (Physical Pin 5)
const int heaterPin = 7;  // D4 (Physical Pin 7)
const int pumpPin = 10;   // D7 (Physical Pin 10)

// Function to handle incoming data
void receiveEvent(int bytes) {
    Serial.println("üì© I2C Data Received!");  // Debugging
    
    receivedData = "";  // Clear previous data
    while (Wire.available()) {
        char c = Wire.read();
        receivedData += c;
    }

    Serial.print("üîç Raw Data: ");
    Serial.println(receivedData);  // Show raw received data

    // ‚úÖ Only process if JSON is valid
    if (receivedData.startsWith("{") && receivedData.endsWith("}")) {
        newDataAvailable = true;  // Set flag when new data arrives
    } else {
        Serial.println("‚ö†Ô∏è Incomplete JSON received, waiting for next part...");
    }
}

void setup() {
    Serial.begin(9600);
    while (!Serial);  // Wait for serial to initialize

    Serial.println("üîÑ Arduino Nano Starting...");

    Wire.begin(SLAVE_ADDR); // Initialize I2C as a slave
    Wire.onReceive(receiveEvent); // Register receive event

    pinMode(burnerPin, OUTPUT);
    pinMode(heaterPin, OUTPUT);
    pinMode(pumpPin, OUTPUT);

    Serial.println("‚úÖ I2C Slave Initialized");
}

void loop() {
    if (newDataAvailable) {  // Check if new data is received
        Serial.println("üì© Processing Received Data...");

        // Parse JSON
        StaticJsonDocument<256> doc;
        DeserializationError error = deserializeJson(doc, receivedData);

        if (!error) {
            const char* deviceType = doc["device"];
            const char* statusValue = doc["status"];

            Serial.print("üîç Extracted Device: ");
            Serial.println(deviceType);
            Serial.print("üîç Extracted Status: ");
            Serial.println(statusValue);

            // Control devices based on extracted values
            if (strcmp(deviceType, "burner") == 0) {
                setOutput(burnerPin, statusValue);
            } else if (strcmp(deviceType, "heater") == 0) {
                setOutput(heaterPin, statusValue);
            } else if (strcmp(deviceType, "pump") == 0) {
                setOutput(pumpPin, statusValue);
            } else {
                Serial.println("‚ö†Ô∏è Unknown device type received!");
            }

        } else {
            Serial.println("‚ùå JSON Parsing Failed! Dumping raw data:");
            Serial.println(receivedData);  // Print raw data for debugging
        }

        newDataAvailable = false;  // Reset flag
    }
    
    delay(500);
}

// ‚úÖ Function to update pin status dynamically
void setOutput(int pin, const char* status) {
    static bool lastState[3] = {LOW, LOW, LOW}; // Store previous states for each pin

    bool newState = (strcmp(status, "on") == 0) ? HIGH : LOW;

    // Only update the pin if there's a change
    if (newState != lastState[pin]) {
        digitalWrite(pin, newState);
        lastState[pin] = newState;
        Serial.print("‚úÖ Updated ");
        Serial.print(pin);
        Serial.println(newState ? " -> ON" : " -> OFF");
    }
}
