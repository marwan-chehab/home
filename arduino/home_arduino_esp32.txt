#include <Wire.h>
#include <ArduinoJson.h>

#define SLAVE_ADDR 8  // I2C address of the Arduino Nano

String receivedData = "";  // Buffer to store received JSON
bool newDataAvailable = false;  // Flag for new data

// Assign pins for devices
const int burnerPin = 2;
const int heaterPin = 7;
const int pumpPin = 10;

// ‚úÖ Improved JSON Buffering Logic
void receiveEvent(int bytes) {
    while (Wire.available()) {
        char c = Wire.read();
        receivedData += c;
    }

    //Serial.print("üîç Raw Data: ");
    //Serial.println(receivedData);  

    // ‚úÖ Check if we have a complete JSON message
    if (receivedData.startsWith("{") && receivedData.endsWith("}")) {
        newDataAvailable = true;
    } else {
        Serial.println("‚ö†Ô∏è Incomplete JSON received, waiting for next part...");
    }
}

void setup() {
    Serial.begin(115200);
    Wire.begin(SLAVE_ADDR);
    Wire.onReceive(receiveEvent);

    pinMode(burnerPin, OUTPUT);
    pinMode(heaterPin, OUTPUT);
    pinMode(pumpPin, OUTPUT);
}

void loop() {
    if (newDataAvailable) {
        //Serial.println("üì© Processing Received Data...");
        
        // ‚úÖ Print raw JSON before parsing
        //Serial.println("üîç Raw Data: ");
        //Serial.println(receivedData);

        // ‚úÖ Split multiple JSON objects if received together
        int startIdx = 0;
        while (startIdx < receivedData.length()) {
            int openBrace = receivedData.indexOf('{', startIdx);
            int closeBrace = receivedData.indexOf('}', openBrace);
            
            if (openBrace == -1 || closeBrace == -1) break;  // No valid JSON found

            // Extract a single JSON object
            String jsonObject = receivedData.substring(openBrace, closeBrace + 1);
            startIdx = closeBrace + 1;  // Move to the next object
            
            // ‚úÖ Parse the JSON object
            StaticJsonDocument<256> doc;
            DeserializationError error = deserializeJson(doc, jsonObject);
            
            if (!error) {
                //Serial.print("üìú Parsed JSON: ");
                serializeJson(doc, Serial);  // Print formatted JSON
                Serial.println();

                String deviceType = doc["device"];
                String status = doc["status"];

                /*
                Serial.print("üîç Extracted Device: ");
                Serial.println(deviceType);
                Serial.print("üîç Extracted Status: ");
                Serial.println(status);
                */
                
                if (deviceType == "burner") {
                    setOutput(burnerPin, status);
                } 
                if (deviceType == "heater") {
                    setOutput(heaterPin, status);
                } 
                if (deviceType == "pump") {
                    setOutput(pumpPin, status);
                }
            } else {
                Serial.println("‚ùå JSON Parsing Failed! Dumping raw object:");
                Serial.println(jsonObject);
            }
        }

        // ‚úÖ Clear buffer after processing
        receivedData = "";
        newDataAvailable = false;
    }

    delay(500);
}


void setOutput(int pin, String status) {
    bool newState = (status == "on") ? HIGH : LOW;
    digitalWrite(pin, newState);
    //Serial.print("‚úÖ Updated ");
    //Serial.print(pin);
    //Serial.println(newState ? " -> ON" : " -> OFF");
}
